// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: keys.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createKey = `-- name: CreateKey :one
INSERT INTO keys(
    id,
    user_id,
    token,
    user_agent,
    user_ip,
    expires_at,
    scope
)
VALUES ($1,$2,$3,$4,$5,$6,$7)
RETURNING id, user_id, token, user_agent, user_ip, expires_at, scope, created_at
`

type CreateKeyParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    int64     `json:"user_id"`
	Token     string    `json:"token"`
	UserAgent string    `json:"user_agent"`
	UserIp    string    `json:"user_ip"`
	ExpiresAt time.Time `json:"expires_at"`
	Scope     string    `json:"scope"`
}

func (q *Queries) CreateKey(ctx context.Context, arg CreateKeyParams) (Key, error) {
	row := q.db.QueryRowContext(ctx, createKey,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.UserAgent,
		arg.UserIp,
		arg.ExpiresAt,
		arg.Scope,
	)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.UserAgent,
		&i.UserIp,
		&i.ExpiresAt,
		&i.Scope,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAllSessionForUser = `-- name: DeleteAllSessionForUser :exec
delete from keys
where user_id = $1 AND scope in ($2::string[])
`

type DeleteAllSessionForUserParams struct {
	UserID int64    `json:"user_id"`
	Scopes []string `json:"scopes"`
}

func (q *Queries) DeleteAllSessionForUser(ctx context.Context, arg DeleteAllSessionForUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteAllSessionForUser, arg.UserID, pq.Array(arg.Scopes))
	return err
}

const deleteSession = `-- name: DeleteSession :exec
delete from keys
where id = $1
`

func (q *Queries) DeleteSession(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSession, id)
	return err
}

const getKey = `-- name: GetKey :one
select id, user_id, token, user_agent, user_ip, expires_at, scope, created_at from keys
where id= $1 
LIMIT 1
`

func (q *Queries) GetKey(ctx context.Context, id uuid.UUID) (Key, error) {
	row := q.db.QueryRowContext(ctx, getKey, id)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.UserAgent,
		&i.UserIp,
		&i.ExpiresAt,
		&i.Scope,
		&i.CreatedAt,
	)
	return i, err
}
